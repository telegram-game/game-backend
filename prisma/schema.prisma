// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserProvider {
  SEED
  LOCAL
  TELEGRAM
  GOOGLE
  FACEBOOK
}

enum UserGameProfileAttribute {
  POCKET
  SALARY
  GAME_PROFILE_LEVEL
}

enum GameHouse {
  DOGS
  HAMSTERS
}

enum HeroAttribute {
  ATTACK
  HP
  CRIT_RATE
  CRIT_DAMAGE
  EVASION
  LIFE_STEAL
  REFLECT
  HP_REGEN
}

enum HeroSkill {
  DESOLATE
  REFLECT
  LIFE_STEAL
  RISING_FURY
  FATAL_BLOW
}

enum ItemCode {
  FIRE_SWORD
  FIRE_SHIELD
  ICE_SWORD
  ICE_SHIELD
}

enum ItemType {
  SWORD
  SHIELD
  HELMET
  ARMOR
  BOOTS
  RING
  AMULET
  GLOVES
  PANTS
  CAPE
  BELT
  BRACERS
  EARRINGS
  NECKLACE
  SHOULDER
  TALISMAN
  WAND
  ST
}

enum Tokens {
  INGAME // The token to play the game
  INGAME_2 // The token to upgrade the level of game profile & buy the items, materials in the game
}

enum MissionStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  ENOUGH_BUDGET
}

enum SeasonStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

model User {
  id                               String                             @id @default(cuid()) @map("id")
  username                         String?                            @unique @map("username")
  password                         String?                            @map("password")
  provider                         UserProvider                       @default(LOCAL) @map("provider")
  providerId                       String?                            @map("provider_id")
  createdAt                        DateTime                           @default(now()) @map("created_at")
  updatedAt                        DateTime                           @updatedAt @map("updated_at")
  userProfile                      UserProfiles[]
  userGameProfile                  UserGameProfiles[]
  userGameHero                     UserGameHeroes[]
  userGameHeroAttributes           UserGameHeroAttributes[]
  userGameHeroSkills               UserGameHeroSkills[]
  userGameInventories              UserGameInventories[]
  userGameHeroItems                UserGameHeroItems[]
  userGameInventoryAttributes      UserGameInventoryAttributes[]
  userTokenBalances                UserTokenBalances[]
  userTokenBalanceHistories        UserTokenBalanceHistories[]
  userTokenClaimInfomations        UserTokenClaimInfomations[]
  userAttributes                   UserGameProfileAttributes[]
  userReferrals                    UserReferrals[]
  userGameSeason                   UserGameProfileGameSeasons[]
  userGameProfileDailyCheckin      UserGameProfileDailyCheckins[]
  userGameProfileGameSeasonMatches UserGameProfileGameSeasonMatches[]

  @@unique([provider, providerId])
  @@map("users")
}

model UserProfiles {
  id        String   @id @default(cuid()) @map("id")
  userId    String   @unique @map("user_id")
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  email     String?  @map("email")
  avatar    String?  @map("avatar")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model UserReferrals {
  id                 String       @id @default(cuid()) @map("id")
  userId             String       @map("user_id")
  provider           UserProvider @map("provider")
  providerUserId     String       @map("provider_user_id")
  referredUserId     String       @map("referred_user_id")
  referredTokenValue Int?         @default(0) @map("referred_token_value")
  referrerTokenValue Int?         @default(0) @map("referrer_token_value")

  /// [Record<string, any>]
  metadata           Json?        @map("metadata")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")

  referredUser User @relation(fields: [referredUserId], references: [id])

  @@unique([provider, providerUserId])
  @@index([userId])
  @@map("user_referrals")
}

model UserGameProfiles {
  id                               String                             @id @default(cuid()) @map("id")
  userId                           String                             @unique @map("user_id")
  house                            GameHouse                          @map("house")
  class                            String?                            @map("class")
  totalLevel                       Int                                @default(2) @map("total_power") // The default should be UserGameProfileAttribute length
  createdAt                        DateTime                           @default(now()) @map("created_at")
  updatedAt                        DateTime                           @updatedAt @map("updated_at")
  user                             User                               @relation(fields: [userId], references: [id])
  userGameHero                     UserGameHeroes[]
  userGameInventories              UserGameInventories[]
  userGameProfileAttributes        UserGameProfileAttributes[]
  userGameSeasons                  UserGameProfileGameSeasons[]
  userGameProfileDailyCheckin      UserGameProfileDailyCheckins[]
  userGameProfileGameSeasonMatches UserGameProfileGameSeasonMatches[]

  @@index([userId])
  @@index([totalLevel])
  @@map("user_game_profiles")
}

model UserGameProfileAttributes {
  id                String                   @id @default(cuid()) @map("id")
  userId            String                   @map("user_id")
  userGameProfileId String                   @map("user_game_profile_id")
  attribute         UserGameProfileAttribute @map("attribute")
  value             Int                      @map("value")
  createdAt         DateTime                 @default(now()) @map("created_at")
  updatedAt         DateTime                 @updatedAt @map("updated_at")
  user              User                     @relation(fields: [userId], references: [id])
  userGameProfile   UserGameProfiles         @relation(fields: [userGameProfileId], references: [id])

  @@unique([userGameProfileId, attribute])
  @@index([userGameProfileId])
  @@map("user_game_attributes")
}

model UserGameHeroes {
  id                     String                   @id @default(cuid()) @map("id")
  userId                 String                   @unique @map("user_id") // user can have only one hero now
  userGameProfileId      String                   @unique @map("user_game_profile_id")
  level                  Int                      @default(1) @map("level")
  totalPower             Int                      @default(1) @map("total_power")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")
  user                   User                     @relation(fields: [userId], references: [id])
  userGameProfile        UserGameProfiles         @relation(fields: [userGameProfileId], references: [id])
  userGameHeroAttributes UserGameHeroAttributes[]
  userGameHeroSkills     UserGameHeroSkills[]
  userGameHeroItems      UserGameHeroItems[]

  @@index([userGameProfileId])
  @@map("user_game_heroes")
}

model UserGameHeroAttributes {
  id             String        @id @default(cuid()) @map("id")
  userId         String        @map("user_id")
  userGameHeroId String        @map("user_game_hero_id")
  attribute      HeroAttribute @map("attribute")

  /// [HeroAttributeValue]
  value        Json           @map("value")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  user         User           @relation(fields: [userId], references: [id])
  userGameHero UserGameHeroes @relation(fields: [userGameHeroId], references: [id])

  @@index([userGameHeroId])
  @@map("user_game_hero_attributes")
}

model UserGameInventories {
  id                String   @id @default(cuid()) @map("id")
  userId            String   @map("user_id")
  userGameProfileId String   @map("user_game_profile_id")
  itemCode          ItemCode @map("item_code")
  itemType          ItemType @map("item_type")
  star              Int      @default(1) @map("star")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // For payment
  paymentCode     String? @unique @map("payment_code")
  /// [InventoryPaymentMetaData]
  paymentMetaData Json?   @map("payment_meta_data")

  user                        User                          @relation(fields: [userId], references: [id])
  userGameInventoryAttributes UserGameInventoryAttributes[]
  userGameProfile             UserGameProfiles              @relation(fields: [userGameProfileId], references: [id])

  @@index([userGameProfileId])
  @@map("user_game_inventories")
}

model UserGameInventoryAttributes {
  id          String        @id @default(cuid()) @map("id")
  userId      String        @map("user_id")
  inventoryId String        @map("inventory_id")
  attribute   HeroAttribute @map("attribute")
  star        Int           @default(1) @map("star")
  canRoll     Boolean       @default(true) @map("can_roll")

  /// [HeroAttributeValue]
  value               Json                 @map("value")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  user                User                 @relation(fields: [userId], references: [id])
  userGameInventories UserGameInventories? @relation(fields: [inventoryId], references: [id])

  @@index([inventoryId])
  @@map("user_game_inventory_attributes")
}

model UserGameHeroItems {
  id             String         @id @default(cuid()) @map("id")
  userId         String         @map("user_id")
  userGameHeroId String         @map("user_game_hero_id")
  itemType       ItemType       @map("item_type")
  inventoryId    String         @unique() @map("inventory_id")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  user           User           @relation(fields: [userId], references: [id])
  userGameHero   UserGameHeroes @relation(fields: [userGameHeroId], references: [id])

  @@unique([userGameHeroId, itemType])
  @@index([userGameHeroId])
  @@map("user_game_hero_items")
}

model UserGameHeroSkills {
  id             String         @id @default(cuid()) @map("id")
  userId         String         @map("user_id")
  userGameHeroId String         @unique @map("user_game_hero_id")
  skill          HeroSkill      @map("skill")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  user           User           @relation(fields: [userId], references: [id])
  userGameHero   UserGameHeroes @relation(fields: [userGameHeroId], references: [id])

  @@index([userGameHeroId])
  @@map("user_game_hero_skills")
}

model UserTokenBalances {
  id        String   @id @default(cuid()) @map("id")
  userId    String   @map("user_id")
  token     Tokens   @default(INGAME) @map("token")
  balance   Float    @default(0.0) @map("balance")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, token])
  @@index([userId, token])
  @@map("user_token_balances")
}

model UserTokenBalanceHistories {
  id          String @id @default(cuid()) @map("id")
  userId      String @map("user_id")
  token       Tokens @default(INGAME) @map("token")
  fromBalance Float  @map("from_balance")
  toBalance   Float  @map("to_balance")

  /// [BalanceHistoryMetadata]
  metaData  Json?    @map("meta_data")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, token, createdAt])
  @@index([userId, token])
  @@map("user_token_balance_histories")
}

model UserTokenClaimInfomations {
  id          String   @id @default(cuid()) @map("id")
  userId      String   @map("user_id")
  token       Tokens   @default(INGAME) @map("token")
  lastClaimAt DateTime @map("last_claim_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, token])
  @@index([userId, token])
  @@map("user_token_claim_infomations")
}

model Missions {
  id             String        @id @default(cuid()) @map("id")
  code           String        @unique @map("code")
  name           String        @map("name")
  description    String?       @map("description")
  fromDate       DateTime      @map("from_date")
  toDate         DateTime      @map("to_date")
  totalBudget    Int           @map("total_budget")
  currentClaimed Int           @map("current_claimed")
  status         MissionStatus @default(ACTIVE) @map("status")

  /// [MissionMetadata]
  metaData     Json           @map("meta_data")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  userMissions UserMissions[]

  @@map("missions")
}

model UserMissions {
  id        String   @id @default(cuid()) @map("id")
  userId    String   @map("user_id")
  missionId String   @map("mission_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  mission   Missions @relation(fields: [missionId], references: [id])

  @@unique([userId, missionId])
  @@index([userId])
  @@map("user_missions")
}

model GameSeasons {
  id                               String                             @id @default(cuid()) @map("id")
  code                             String                             @unique @map("code")
  name                             String                             @map("name")
  description                      String?                            @map("description")
  fromDate                         DateTime                           @map("from_date")
  toDate                           DateTime                           @map("to_date")
  status                           SeasonStatus                       @default(ACTIVE) @map("status")
  createdAt                        DateTime                           @default(now()) @map("created_at")
  updatedAt                        DateTime                           @updatedAt @map("updated_at")
  userGameSeasons                  UserGameProfileGameSeasons[]
  UserGameProfileGameSeasonMatches UserGameProfileGameSeasonMatches[]

  @@map("game_seasons")
}

model UserGameProfileGameSeasons {
  id                   String   @id @default(cuid()) @map("id")
  userId               String   @map("user_id")
  userGameProfileId    String   @map("user_game_profile_id")
  seasonId             String   @map("season_id")
  rankPoint            Int      @default(0) @map("rank_point")
  energy               Int      @default(0) @map("energy")
  nextMatchId          String   @default(uuid()) @map("next_match_id")
  lastRechargeEnergyAt DateTime @default(now()) @map("last_recharge_energy_at")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  user    User             @relation(fields: [userId], references: [id])
  profile UserGameProfiles @relation(fields: [userGameProfileId], references: [id])
  season  GameSeasons      @relation(fields: [seasonId], references: [id])

  @@unique([userGameProfileId, seasonId])
  @@index([userGameProfileId])
  @@map("user_game_profile_game_seasons")
}

model UserGameProfileGameSeasonMatches {
  id                String   @id @map("id")
  userId            String   @map("user_id")
  userGameProfileId String   @map("user_game_profile_id")
  seasonId          String   @map("season_id")
  fromUserId        String   @map("from_user_id")
  toUserId          String   @map("to_user_id")
  winnerUserId      String   @map("winner_user_id")
  rankPoint         Int      @default(0) @map("rank_point")
  metadata          Json?    @map("metadata")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user    User             @relation(fields: [userId], references: [id])
  profile UserGameProfiles @relation(fields: [userGameProfileId], references: [id])
  season  GameSeasons      @relation(fields: [seasonId], references: [id])

  @@index([userGameProfileId])
  @@map("user_game_profile_game_season_matches")
}

model UserGameProfileDailyCheckins {
  id                String   @id @default(cuid()) @map("id")
  userId            String   @map("user_id")
  userGameProfileId String   @map("game_profile_id")
  checkinCode       String   @map("checkin_code")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user        User             @relation(fields: [userId], references: [id])
  gameProfile UserGameProfiles @relation(fields: [userGameProfileId], references: [id])

  @@unique([userGameProfileId, checkinCode])
  @@index([userGameProfileId, userId])
  @@map("user_game_profile_daily_checkins")
}
